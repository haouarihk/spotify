// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User? @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime? @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime? @updatedAt
  admin         Boolean?  @default(false)
  bio           String?

  // frezed
  frozen   Boolean?  @default(false)
  frozenAt DateTime?

  accounts                  Account[]
  sessions                  Session[]
  playlists                 Playlist[]
  ApiKey                    ApiKey?
  NotificationSubscriptions NotificationSubscription[]

  @@index([email])
  @@map("users")
}

model ApiKey {
  id     String @id @default(cuid())
  key    String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId])
  @@index([userId])
  @@map("api_keys")
}

model Playlist {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Song {
  id       String @id @default(uuid())
  title    String
  artist   String
  album    String
  duration Int
}

model PlaylistSong {
  id         String   @id @default(uuid())
  playlistId String
  songId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model NotificationSubscription {
  endpoint       String  @id @unique
  expirationTime Int?
  keys           Json
  user           User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId         String?

  @@index([userId])
}
